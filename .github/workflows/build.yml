name: build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/voicevox_engine
  PYTHON_VERSION: '3.8.10'
  VOICEVOX_RESOURCE_VERSION: '0.10.preview.2'
  VOICEVOX_CORE_VERSION: '0.10.preview.6'
  VOICEVOX_ENGINE_VERSION: |- # releaseのときはタグが、それ以外はlatestがバージョン名に
    ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}

jobs:
  # Build Mac binary (x64 arch only)
  build-mac:
    strategy:
      matrix:
        include:
        - os: macos-11
          pip_cache_path: ~/Library/Caches/pip
          voicevox_core_library_name: libcore_cpu_universal2.dylib
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-osx-universal2-1.10.0.tgz
          artifact_name: macos-universal2

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install CCache
        shell: bash
        run: brew install ccache

      # NOTE: The default sed of macOS is BSD sed.
      #       There is a difference in specification between BSD sed and GNU sed,
      #       so you need to install GNU sed.
      - name: Install GNU sed on macOS
        shell: bash
        run: brew install gnu-sed

      - name: Create download and build directory
        run: mkdir download build

      # Build Python 3 for OSX Universal2
      - name: Prepare Python ${{ env.PYTHON_VERSION }} cache
        uses: actions/cache@v2
        id: python-cache
        with:
          key: python-${{ env.PYTHON_VERSION }}
          path: download/python

      - name: Checkout Python ${{ env.PYTHON_VERSION }}
        if: steps.python-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: python/cpython
          ref: v${{ env.PYTHON_VERSION }}
          path: download/python

      - name: Build and Install Python ${{ env.PYTHON_VERSION }}
        shell: bash
        run: |
          set -eux
          brew install openssl
          ./configure --enable-universalsdk --with-universal-archs=universal2
          make
          make install
        working-directory: download/python

      - name: Show Python binary archs (debug info)
        shell: bash
        run: lipo -archs /usr/local/bin/python3

      - name: Prepare Python dependencies cache
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.pip_cache_path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        shell: bash
        run: |
          pip3 install --upgrade pip setuptools wheel
          pip3 install -r requirements-dev.txt

      - name: Generate licenses.json
        shell: bash
        run: |
          python3 generate_licenses.py > licenses.json

      # Download ONNX Runtime
      - name: Export ONNX Runtime url to calc hash
        shell: bash
        run: echo "${{ matrix.onnxruntime_url }}" > download/onnxruntime_url.txt

      - name: Prepare ONNX Runtime cache
        uses: actions/cache@v2
        id: onnxruntime-dylib-cache
        with:
          key: ${{ matrix.os }}-onnxruntime-dylib-${{ hashFiles('download/onnxruntime_url.txt') }}-v1
          path: download/onnxruntime

      - name: Download ONNX Runtime
        if: steps.onnxruntime-dylib-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.onnxruntime_url }}" > download/onnxruntime.tgz

          # extract only dylibs
          mkdir -p download/onnxruntime
          tar xf "download/onnxruntime.tgz" -C "download/onnxruntime" --strip-components 1 'onnxruntime-*/lib/*.dylib'
          rm download/onnxruntime.tgz

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      # Download VOICEVOX RESOURCE
      - name: Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v2
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: Checkout VOICEVOX RESOURCE
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      # Merge VOICEVOX RESOURCE
      - name: Merge VOICEVOX RESOURCE
        shell: bash
        run: |
          set -eux
          rm -r speaker_info
          cp -r download/resource/character_info speaker_info

      - name: Prepare VOICEVOX Core release cache
        uses: actions/cache@v2
        id: voicevox-core-cache
        with:
          key: ${{ matrix.os }}-voicevox-core-${{ env.VOICEVOX_CORE_VERSION }}
          path: download/core

      - name: Download VOICEVOX Core release
        if: steps.voicevox-core-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # extracted like download/core/metas.json
          curl -L "https://github.com/VOICEVOX/voicevox_core/releases/download/${{ env.VOICEVOX_CORE_VERSION }}/core.zip" > download/core.zip
          ditto -x -k --sequesterRsrc --rsrc download/core.zip download/
          rm download/core.zip

      - name: Download PyOpenJTalk dictionary
        shell: bash
        run: |
          set -eux

          # Download pyopenjtalk dictionary
          # try 5 times, sleep 5 seconds before retry
          for i in $(seq 5); do
            EXIT_CODE=0
            python3 -c "import pyopenjtalk; pyopenjtalk._lazy_init()" || EXIT_CODE=$?

            if [ "$EXIT_CODE" = "0" ]; then
              break
            fi

            sleep 5
          done

          if [ "$EXIT_CODE" != "0" ]; then
            exit "$EXIT_CODE"
          fi

      - name: Build run.py
        run: |
          set -eux

          # Replace version
          gsed -i "s/__version__ = \"latest\"/__version__ = \"${{ env.VOICEVOX_ENGINE_VERSION }}\"/" ../voicevox_engine/__init__.py

          # Nuitka does not copy grandchild dependencies. Explicitly copy libonnxruntime
          python3 -m nuitka \
            --output-dir=./ \
            --standalone \
            --plugin-enable=numpy \
            --plugin-enable=multiprocessing \
            --follow-import-to=numpy \
            --follow-import-to=aiofiles \
            --include-package=uvicorn \
            --include-package=anyio \
            --include-package-data=pyopenjtalk \
            --include-package-data=scipy \
            --include-data-file=../licenses.json=./ \
            --include-data-file=../presets.yaml=./ \
            --include-data-file=../user.dic=./ \
            --include-data-file=../download/core/*.bin=./ \
            --include-data-file=../download/core/metas.json=./ \
            --include-data-file=../download/core/${{ matrix.voicevox_core_library_name }}=./ \
            --include-data-file=../download/onnxruntime/lib/libonnxruntime.dylib=./ \
            --include-data-file=${{ env.pythonLocation }}/lib/python*/site-packages/scipy/.dylibs/*.dylib=./scipy/.dylibs/ \
            --include-data-file=${{ env.pythonLocation }}/lib/python*/site-packages/_soundfile_data/*=./_soundfile_data/ \
            --include-data-dir=../speaker_info=./speaker_info \
            --follow-imports \
            --no-prefer-source-code \
            ../run.py
        working-directory: build
        env:
          CCFLAGS: -arch arm64 -arch x86_64
          LDFLAGS: -arch arm64 -arch x86_64

      - name: Set @rpath to @executable_path
        run: |
          install_name_tool -add_rpath @executable_path/. build/run.dist/run

      # NOTE: This task should ideally be done by Nuitka in the `Build run.py` step.
      # Please remove this step when you have solved the problem with Nuitka.
      - name: Copy the missing .dylib files into the distribution
        run: |
          python3 build_util/macos/copy_missing_dylibs.py build/run.dist/

      # NOTE: This task should ideally be done by Nuitka in the `Build run.py` step.
      # Please remove this step when you have solved the problem with Nuitka.
      - name: Fix the rpaths of the .dylib files in the distribution
        run: |
          python3 build_util/macos/fix_rpaths.py build/run.dist/

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: build/run.dist/


  upload-to-release:
    if: github.event.release.tag_name != ''
    needs: build-mac
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name:
          - macos-universal2
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              p7zip-full

      - name: Download and extract artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}/

      - name: Rearchive and split artifact
        run: |
          # compressed to artifact.7z.001, artifact.7z.002, ...
          7z -r -v1g a "${{ matrix.artifact_name }}.7z" "${{ matrix.artifact_name }}/"

          # Output splitted archive list
          ls ${{ matrix.artifact_name }}.7z.* > archives.txt
          mv archives.txt "${{ matrix.artifact_name }}.7z.txt"

      - name: Upload splitted archives to Release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }} # == github.event.release.tag_name
          file_glob: true
          file: ${{ matrix.artifact_name }}.7z.*
